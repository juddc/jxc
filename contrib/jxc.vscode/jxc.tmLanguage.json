{
    "version": "1.0.0",
    "scopeName": "source.jxc",
    "$schema": "/home/judd/Projects/vscode-tmlanguage-json-schema.json",
    "patterns": [
        { "include": "#value" },
        { "include": "#comment" }
    ],
    "repository": {
        "comment": {
            "comment": "Comments",
            "match": "(\\#.*)$",
            "captures": {
                "1": { "name": "comment.line.number-sign.jxc" },
                "2": { "name": "punctuation.definition.comment.jxc" }
            }
        },
        "toplevel_key_value_pair": {
            "patterns": [
                {
                    "name": "string.quoted.single.basic.line.jxc",
                    "match": "[a-zA-Z_$][a-zA-Z0-9_$]*\\s*\\:"
                }
            ]
        },

        "constant_null": {
            "match": "\\b(null)\\b",
            "name": "constant.language.null.jxc"
        },
        "constant_bool": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean.jxc"
        },
        "number_integer_dec": {
            "match": "([-+]?)(0|[1-9]+[0-9]*)([a-zA-Z_%][a-zA-Z0-9_%]{0,15})?",
            "captures": {
                "1": { "name": "constant.numeric.integer.sign.jxc" },
                "2": { "name": "constant.numeric.integer.jxc" },
                "3": { "name": "variable.expression.number.suffix.jxc" }
            }
        },
        "number_integer_hex": {
            "match": "([-+]?)(0[xX])([a-fA-F0-9]+)([a-zA-Z_%][a-zA-Z0-9_%]{0,15})?",
            "captures": {
                "1": { "name": "constant.numeric.hex.sign.jxc" },
                "2": { "name": "constant.numeric.hex.prefix.jxc" },
                "3": { "name": "constant.numeric.hex.jxc" },
                "4": { "name": "variable.expression.number.suffix.jxc" }
            }
        },
        "number_integer_oct": {
            "match": "([-+]?)(0[oO])([0-7]+)([a-zA-Z_%][a-zA-Z0-9_%]{0,15})?",
            "captures": {
                "1": { "name": "constant.numeric.oct.sign.jxc" },
                "2": { "name": "constant.numeric.oct.prefix.jxc" },
                "3": { "name": "constant.numeric.oct.jxc" },
                "4": { "name": "variable.expression.number.suffix.jxc" }
            }
        },
        "number_integer_bin": {
            "match": "([-+]?)(0[bB])([01]+)([a-zA-Z_%][a-zA-Z0-9_%]{0,15})?",
            "captures": {
                "1": { "name": "constant.numeric.bin.sign.jxc" },
                "2": { "name": "constant.numeric.bin.prefix.jxc" },
                "3": { "name": "constant.numeric.bin.jxc" },
                "4": { "name": "variable.expression.number.suffix.jxc" }
            }
        },
        "number_integer": {
            "patterns": [
                { "include": "#number_integer_hex" },
                { "include": "#number_integer_oct" },
                { "include": "#number_integer_bin" },
                { "include": "#number_integer_dec" }
            ]
        },
        "number_float": {
            "patterns": [
                {
                    "match": "([-+]?)(0|[1-9]+)(\\.)(0|[1-9]+)([eE][+-][0-9]+?)([a-zA-Z_%][a-zA-Z0-9_%]{0,15})?",
                    "captures": {
                        "1": { "name": "constant.numeric.float.jxc" },
                        "2": { "name": "constant.numeric.float.jxc" },
                        "3": { "name": "constant.numeric.float.jxc" },
                        "4": { "name": "constant.numeric.float.jxc" },
                        "5": { "name": "constant.numeric.float.jxc" },
                        "6": { "name": "variable.expression.number.suffix.jxc" }
                    }
                },
                {
                    "match": "([-+]?)(0|[1-9]+)([eE][+-][0-9]+?)([a-zA-Z_%][a-zA-Z0-9_%]{0,15})?",
                    "captures": {
                        "1": { "name": "constant.numeric.float.jxc" },
                        "2": { "name": "constant.numeric.float.jxc" },
                        "3": { "name": "constant.numeric.float.jxc" },
                        "4": { "name": "variable.expression.number.suffix.jxc" }
                    }
                }
            ]
        },

        "string_single_line": {
            "patterns": [
                {
                    "name": "string.quoted.single.basic.line.jxc",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "match": "\\\\([btnfr\"\\\\\\n/ ]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})",
                            "name": "constant.character.escape.jxc"
                        },
                        {
                            "match": "\\\\[^btnfr/\"\\\\\\n]",
                            "name": "invalid.illegal.escape.jxc"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.basic.line.jxc",
                    "begin": "\\'",
                    "end": "\\'",
                    "patterns": [
                        {
                            "match": "\\\\([btnfr\\'\\\\\\n/ ]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})",
                            "name": "constant.character.escape.jxc"
                        },
                        {
                            "match": "\\\\[^btnfr/\\'\\\\\\n]",
                            "name": "invalid.illegal.escape.jxc"
                        }
                    ]
                }
            ]
        },

        "string_raw_single_line": {
            "match": "(r)(['\"])(\\()(.*)(\\))(\\2)",
            "captures": {
                "1": { "name": "storage.type.string.raw.jxc" },
                "2": { "name": "storage.type.string.quote.jxc" },
                "3": { "name": "storage.type.string.parens.jxc" },
                "4": { "name": "string.quoted.raw.jxc" },
                "5": { "name": "storage.type.string.parens.jxc" },
                "6": { "name": "storage.type.string.quote.jxc" }
            }
        },

        "string_raw_multi_line": {
            "patterns": [
                {
                    "begin": "(r)(['\"])([^\\(\\)\\\\ ]{0,16})(\\()",
                    "end": "(\\))(\\3)(\\2)",
                    "name": "string.quoted.raw.jxc",
                    "beginCaptures": {
                        "1": { "name": "storage.type.string.raw.jxc" },
                        "2": { "name": "storage.type.string.quote.jxc" },
                        "3": { "name": "constant.character.escape.jxc" },
                        "4": { "name": "storage.type.string.parens.jxc" },
                        "5": { "name": "string.quoted.raw.jxc" }
                    },
                    "endCaptures": {
                        "1": { "name": "storage.type.string.parens.jxc" },
                        "2": { "name": "constant.character.escape.jxc" },
                        "3": { "name": "storage.type.string.quote.jxc" }
                    }
                }
            ]
        },

        "string_base64_single_line": {
            "begin": "(b64)(['\"])",
            "end": "(\\2)",
            "captures": {
                "1": { "name": "storage.type.string.base64.jxc" },
                "2": { "name": "storage.type.string.quote.jxc" }
            },
            "endCaptures": {
                "1": { "name": "storage.type.string.quote.jxc" }
            },
            "patterns": [
                {
                    "match": "[A-Za-z0-9+/=]+",
                    "name": "string.quoted.raw.jxc"
                }
            ]
        },

        "string_base64_multi_line": {
            "begin": "(b64)(['\"])(\\()",
            "end": "(\\))(\\2)",
            "captures": {
                "1": { "name": "storage.type.string.base64.jxc" },
                "2": { "name": "storage.type.string.quote.jxc" },
                "3": { "name": "storage.type.string.parens.jxc" }
            },
            "endCaptures": {
                "1": { "name": "storage.type.string.parens.jxc" },
                "2": { "name": "storage.type.string.quote.jxc" }
            },
            "patterns": [
                {
                    "match": "[A-Za-z0-9+/=]+",
                    "name": "string.quoted.raw.jxc"
                }
            ]
        },

        "list": {
            "name": "punctuation.section.list.jxc",
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                { "include": "#comment" },
                { "include": "#value" }
            ]
        },

        "expr_operator": {
            "patterns": [
                {
                    "match": "[\\|\\&\\!\\=\\+\\-\\*\\/\\%\\^\\?\\~\\<\\>\\;]{1,3}",
                    "name": "keyword.operator.jxc"
                },
                {
                    "match": "\\.",
                    "name": "punctation.accessor.dot.jxc"
                },
                {
                    "match": "\\,",
                    "name": "punctation.accessor.comma.jxc"
                },
                {
                    "name": "punctuation.section.expr.begin.jxc",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        { "include": "#expr_value" }
                    ]
                },
                {
                    "name": "punctuation.section.expr.begin.jxc",
                    "begin": "\\[",
                    "end": "\\]",
                    "patterns": [
                        { "include": "#expr_value" }
                    ]
                }
            ]
        },
        "expr_identifier": {
            "match": "[a-zA-Z_][a-zA-Z0-9_]*",
            "name": "variable.expression.identifier.jxc"
        },
        "expr": {
            "name": "punctuation.section.expr.begin.jxc",
            "begin": "\\(",
            "end": "\\)",
            "patterns": [
                { "include": "#expr_value" }
            ]
        },
        "expr_value": {
            "patterns": [
                { "include": "#constant_null" },
                { "include": "#constant_bool" },
                { "include": "#number_float" },
                { "include": "#number_integer" },
                { "include": "#string_single_line" },
                { "include": "#string_base64_single_line" },
                { "include": "#expr_operator" },
                { "include": "#expr_identifier" }
            ]
        },
        "object_key": {
            "patterns": [
                { "include": "#constant_null" },
                { "include": "#constant_bool" },
                { "include": "#number_integer" },
                { "include": "#string_single_line" },
                { "include": "#string_raw_single_line" },
                {
                    "match": "([a-zA-Z_$*][a-zA-Z0-9_$*]*)(([\\.\\-])([a-zA-Z_$*][a-zA-Z0-9_$*]*))*(?=\\s*\\:)",
                    "name": "variable.other.key.jxc"
                }
            ]
        },

        "object": {
            "name": "punctuation.section.mapping.jxc",
            "begin": "\\{",
            "end": "\\}",
            "patterns": [
                { "include": "#object_key" },
                {
                    "match": ":",
                    "name": "punctuation.separator.key-value.jxc"
                },
                {
                    "match": ",|\\n",
                    "name": "punctuation.separator.key-value.jxc"
                },
                { "include": "#value" },
                { "include": "#comment" }
            ]
        },

        "annotation_inner": {
            "name": "punctuation.section.annotation.generic.jxc",
            "patterns": [
                {
                    "match": "([a-zA-Z_$][a-zA-Z0-9_$]*)",
                    "name": "entity.name.type.jxc"
                },
                { "include": "#constant_null" },
                { "include": "#constant_bool" },
                { "include": "#string_raw_single_line" },
                {
                    "match": "[*?|&=]",
                    "name": "keyword.operator.jxc"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.separator.annotation.jxc"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator.annotation.jxc"
                },
                { "include": "#number_float" },
                { "include": "#number_integer" },
                { "include": "#string_single_line" },
                {
                    "name": "punctuation.section.generic.begin.jxc",
                    "begin": "\\(",
                    "end": "\\)",
                    "patterns": [
                        { "include": "#annotation_inner" }
                    ]
                },
                {
                    "name": "punctuation.section.generic.begin.jxc",
                    "begin": "\\<",
                    "end": "\\>",
                    "patterns": [
                        { "include": "#annotation_inner" }
                    ]
                }
            ]
        },

        "unannotated_value": {
            "patterns": [
                { "include": "#constant_null" },
                { "include": "#constant_bool" },
                { "include": "#number_float" },
                { "include": "#number_integer" },
                { "include": "#string_base64_multi_line" },
                { "include": "#string_base64_single_line" },
                { "include": "#string_raw_single_line" },
                { "include": "#string_raw_multi_line" },
                { "include": "#string_single_line" },
                { "include": "#list" },
                { "include": "#expr" },
                { "include": "#object" }
            ]
        },

        "value": {
            "patterns": [
                {
                    "match": "(?=true|false|null|[\\-\\+]|[0-9]|['\"]|r['\"]|b64['\"]|\\[|\\(|\\{)",
                    "include": "#unannotated_value"
                },
                {
                    "begin": "(\\!)?([a-zA-Z_$][a-zA-Z0-9_$]*)",
                    "end": "(?=true|false|null|[\\-\\+]|[0-9]|['\"]|r['\"]|b64['\"]|\\[|\\(|\\{)",
                    "captures": {
                        "1": { "name": "keyword.operator.jxc" },
                        "2": { "name": "entity.name.type.jxc" }
                    },
                    "patterns": [
                        {
                            "match": "\\.",
                            "name": "keyword.operator.jxc"
                        },
                        {
                            "match": "([a-zA-Z_$][a-zA-Z0-9_$]*)",
                            "name": "entity.name.type.jxc"
                        },
                        {
                            "begin": "\\<",
                            "end": "\\>",
                            "name": "punctuation.section.generic.jxc",
                            "patterns": [
                                { "include": "#annotation_inner" }
                            ]
                        }
                    ]
                }
            ]
        }
    }
}
